public class Main {

    /*
    В джава ключевое слово статик означает, что переменная принадлежит классу а не обьекту класса.

    name
    id
    static int counter = 2;

    Object1 ( name John, id =22)      Object2 ( name Bill, id = 45

    static Fields  - когда мы обьявляем статическое поле, создается только одна копия этого поля и она используется
    всеми обьектами класса
     */
    public static void main(String[] args) {
        Car bmw = new Car("BMW", 2022);
        Car car2 = new Car("Audi", 2021);
        Car car3 = new Car("Audi", 2021);
        System.out.println("The number of cars created is " + Car.getCounter());


        //  Когда нужно использовать статические поля:
        // - когда значение переменной не зависит от обьекта
        // - когда значение переменной должно быть использовано всеми обьектами


        // Статические методы
        /*
        Статические методы также не зависят от обьекта, а принадлежат классу. Поэтому
        вызвать статический метод можно также как и переменную не создавая обьект, а через имя класса.
        Обычно статические методы используются для выполнения действия не зависяшеего от создания обьекта


         следующие комбинации статических и не статических методов и переменных возможны:
        1. обычные методы имеют доступ ("видят") как другие обычные методы таки переменные
        2. обычные методы также имеют прямой доступ к  статическим переменным и статическим методам
        3. статические методы имеют доступ к статическим переменным и статическим методам
        4. статические методы не имеют прямого доступа к обычным переменным и методам. Для этого им нужен обьект
            класса.

            //  стаитический блок

         */
        Car.setCounter(25);
        System.out.println(Car.counter);

        // Несколько моментов:
        /*
        1. Статические методы нельзя переопределить (не могут быть overridden)
        2. Абстрактные методы не могут быть статическими
        3. Статические методы не могут использовать слова this  и super
         */


    }
}
