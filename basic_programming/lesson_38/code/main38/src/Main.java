public class Main {
    /*
f(n) = 9n +73               ->  O(n)
f(n) = 1*235                -> O(1)
f(n) = n^2 + 7n +123        -> O(n^2)
f(n) = n^3 +2000n +8765     -> O(n^3)
f(n) = n + sqrt(n)          -> O(n)


2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
2^5 = 32

2^5 = 2*2*2*2*2 = 32
Логарифм от числа 32  - это в какую степень нужно возвести двойку чтобы получить 32

log(32) = 5

f(n) = n
f(n) = log(n)

при бинарном поиске ( упорядоченный маасив разбиватеся пополам и искомое число сравнивается с серединой а потом
тоже самое в оставшейся части массива если значение не найдено)
0 итерация: размер массива  n
1 итерация: размер массива  n/2  (2^1)
2 итерация: размер массива  n/4  (2^2)
3 итерация: размер массива  n/8  (2^3)
....
i-ая итерация:  размер массива n/2^i

1 =n/2^i
2^i =n
i = log(n) // сложность алгоритма бинарного поиска
O(logn)




     */
}
